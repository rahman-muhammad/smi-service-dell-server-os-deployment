vmaccepteula
%include /tmp/rootpw.cfg
install nfs --server={0} --dir={1}
reboot
%pre --unsupported --interpreter=busybox
cat >/tmp/daemon.py << EOF1
import sys, os, time, atexit,commands
from signal import SIGTERM 
class Daemon:
    def __init__(self, pidfile, stdin='/dev/null', stdout='/dev/null', stderr='/dev/null'):
        self.stdin = stdin
        self.stdout = stdout
        self.stderr = stderr
        self.pidfile = pidfile
    
    def daemonize(self):
        try: 
            pid = os.fork() 
            if pid > 0:
                # exit first parent
                sys.exit(0) 
        except OSError, e: 
            sys.stderr.write("fork #1 failed: %d (%s)\n" % (e.errno, e.strerror))
            sys.exit(1)
    
        # decouple from parent environment
        os.chdir("/") 
        os.setsid() 
        os.umask(0) 
    
        # do second fork
        try: 
            pid = os.fork() 
            if pid > 0:
                # exit from second parent
                sys.exit(0) 
        except OSError, e: 
            sys.stderr.write("fork #2 failed: %d (%s)\n" % (e.errno, e.strerror))
            sys.exit(1) 
    
        # redirect standard file descriptors
        sys.stdout.flush()
        sys.stderr.flush()
        si = file(self.stdin, 'r')
        so = file(self.stdout, 'a+')
        se = file(self.stderr, 'a+', 0)
        os.dup2(si.fileno(), sys.stdin.fileno())
        os.dup2(so.fileno(), sys.stdout.fileno())
        os.dup2(se.fileno(), sys.stderr.fileno())
    
        # write pidfile
        atexit.register(self.delpid)
        pid = str(os.getpid())
        file(self.pidfile,'w+').write("%s\n" % pid)
    
    def delpid(self):
        os.remove(self.pidfile)

    def start(self):
        # Check for a pidfile to see if the daemon already runs
        try:
            pf = file(self.pidfile,'r')
            pid = int(pf.read().strip())
            pf.close()
        except IOError:
            pid = None
    
        if pid:
            message = "pidfile %s already exist. Daemon already running?\n"
            sys.stderr.write(message % self.pidfile)
            sys.exit(1)
        
        # Start the daemon
        self.daemonize()
        self.run()

    def stop(self):
        # Get the pid from the pidfile
        try:
            pf = file(self.pidfile,'r')
            pid = int(pf.read().strip())
            pf.close()
        except IOError:
            pid = None
    
        if not pid:
            message = "pidfile %s does not exist. Daemon not running?\n"
            sys.stderr.write(message % self.pidfile)
            return # not an error in a restart

        # Try killing the daemon process    
        try:
            MY_OP=""
            CTR  = 0
            while CTR < 10:
                CTR += 1
                TEMP_CMD="kill -9 " + str(pid)
                MY_OP = commands.getoutput(TEMP_CMD)
                if (MY_OP.find("No such process")) > 0:
                    if os.path.exists(self.pidfile):
                        os.remove(self.pidfile)
                time.sleep(2)
        except OSError, err:
            err = str(err)
            if err.find("No such process") > 0:
                if os.path.exists(self.pidfile):
                    os.remove(self.pidfile)
            else:
                print str(err)
                sys.exit(1)

    def restart(self):
        self.stop()
        self.start()

    def run(self):
        message = "hello there..."
EOF1
cat >/tmp/runDaemon.py << EOF2
import sys, time, httplib, string, commands
from xml.dom.minidom import parseString
from daemon import Daemon
class MyDaemon(Daemon):
    def run(self):
        MY_SVCTAG =commands.getoutput("esxcfg-info -w | grep -i serial | sed 's/[^a-zA-Z0-9]*\./ /g' | awk '{print \$3}'")
        ERR_MSG     = []
        ERR_MSG_STR = ''
        ERR_CODE    = '267195'
        CTR         = 0
        errorFound  = False
        while (CTR < 40 and errorFound == False):
                time.sleep(30)
                CTR += 1
                f=open('/var/log/esxi_install.log','r')
                if (f):
                    LINES = f.readlines()
                    f.close()
                    for i in range(len(LINES)):
                        if ((string.find(LINES[i],"ERROR") != -1) and (string.find(LINES[i],"DEBUG") == -1)):
                            TEMP_STR = LINES[i].rstrip('\n')
                            ERR_MSG.append(TEMP_STR)
                            errorFound = True                        
                    if (len(ERR_MSG) > 0):
                        for MSG in ERR_MSG:
                            ERR_MSG_STR += MSG

                if (len(MY_SVCTAG) == 7 and len(ERR_MSG_STR) > 0):    
                    defNS="http://pg.dell.com/spectre/deploymentprogress/ws"
                    envelope_template = """<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ws="http://pg.dell.com/spectre/deploymentprogress/ws">"""
                    envelope_template += """<soapenv:Header/>"""
                    envelope_template += """<soapenv:Body>"""
                    envelope_template += """<ws:SetInstallationError>"""
                    envelope_template += """<ws:serviceTag>""" +  MY_SVCTAG + """</ws:serviceTag>"""
                    envelope_template += """<ws:errorCode>""" + ERR_CODE + """</ws:errorCode>"""
                    envelope_template += """<ws:errorLogs>""" + ERR_MSG_STR + """</ws:errorLogs>"""
                    envelope_template += """</ws:SetInstallationError>"""
                    envelope_template += """</soapenv:Body>"""
                    envelope_template += """</soapenv:Envelope>"""
                    try:
                        envlen = len(envelope_template)
                        _post = 'http://<APPLIANCE_IP>/Spectre/DeploymentProgressService'
                        _host = '<APPLIANCE_IP>'
                        _port = 443
                        http_conn = httplib.HTTPSConnection(_host,_port)
                        http_conn.putrequest('POST', _post)
                        http_conn.putheader('Host', _host)
                        http_conn.putheader('Content-Type', 'text/xml; charset="utf-8"')
                        http_conn.putheader('Content-Length', str(envlen))
                        http_conn.putheader('SOAPAction', 'http://pg.dell.com/spectre/deploymentprogress/ws/SetInstallationError')
                        http_conn.endheaders() 
                        http_conn.send(envelope_template)
                        httpresponse = http_conn.getresponse()
                        response = httpresponse.read()
                        http_conn.close() 
                        idResponseBlob = parseString(response)
                        idResponseBlob.unlink()
                        daemon.stop()
                    except Exception,detail:
                        TEMP_STR="logger Exception:" + str(detail)
                        print TEMP_STR
                        daemon.stop()
            
if __name__ == "__main__":
    daemon = MyDaemon('/tmp/daemon-example.pid')
    if len(sys.argv) == 2:
        if 'start' == sys.argv[1]:
            daemon.start()
        elif 'stop' == sys.argv[1]:
            daemon.stop()
        elif 'restart' == sys.argv[1]:
            daemon.restart()
        else:
            print "Unknown command"
            #sys.exit(2)
        sys.exit(0)
    else:
        print "usage: %s start|stop|restart" % sys.argv[0]
EOF2
cat > /tmp/getIdentity.py <<EOF3
import httplib,commands,os,sys,re,string
from xml.dom.minidom import parseString
MY_SVCTAG =commands.getoutput("esxcfg-info -w | grep -i serial | sed 's/[^a-zA-Z0-9]*\./ /g' | awk '{print \$3}'")
MY_MACLIST=commands.getoutput("esxcfg-nics -l| grep -vi description | awk '{print \$7}'")
MACARRAY=MY_MACLIST.split('\n')
MY_MAC=MACARRAY[0]
useStaticIP  = False
macAddrToken = ""
vlanidToken  = ""
ipAddrToken  = ""
dnsServers   = ""
ksOutput     = ""
defNS        = "http://pg.dell.com/spectre/deploymentprogress/ws"
envelope_template = """<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ws="http://pg.dell.com/spectre/deploymentprogress/ws">"""
envelope_template += """<soapenv:Header/>"""
envelope_template += """<soapenv:Body>"""
envelope_template += """<ws:GetIdentity>"""
envelope_template += """<ws:serviceTag>""" +  MY_SVCTAG + """</ws:serviceTag>"""
envelope_template += """<ws:requestToken>""" + MY_MAC + """</ws:requestToken>"""
envelope_template += """</ws:GetIdentity>"""
envelope_template += """</soapenv:Body>"""
envelope_template += """</soapenv:Envelope>"""
try:
    envlen = len(envelope_template)
    _post = 'http://<APPLIANCE_IP>/Spectre/DeploymentProgressService'
    _host = '<APPLIANCE_IP>'
    _port = 443
    http_conn = httplib.HTTPSConnection(_host,_port)
    http_conn.putrequest('POST', _post)
    http_conn.putheader('Host', _host)
    http_conn.putheader('Content-Type', 'text/xml; charset="utf-8"')
    http_conn.putheader('Content-Length', str(envlen))
    http_conn.putheader('SOAPAction', 'http://pg.dell.com/spectre/deploymentprogress/ws/GetIdentity')
    http_conn.endheaders() 
    http_conn.send(envelope_template)
    httpresponse = http_conn.getresponse()
    response = httpresponse.read()
    http_conn.close() 
    idResponseBlob = parseString(response)
    serverDetailsNodeList = idResponseBlob.getElementsByTagNameNS(defNS,'ServerDetails')
    if (serverDetailsNodeList == None or serverDetailsNodeList.length <= 0):
        print "ERROR: Unable to get server detail info from Dell Plugin"
    else:
        for serverDetailsNode in serverDetailsNodeList.item(0).childNodes:
            if (serverDetailsNode and serverDetailsNode.hasChildNodes()):
                tempNodeVal = serverDetailsNode.childNodes.item(0).nodeValue
            if (serverDetailsNode.localName == "password" and tempNodeVal != None):
                ksOutput += "rootpw --iscrypted " + tempNodeVal + "\n" 
            elif (serverDetailsNode.localName == "NetworkDetails"):
                networkDetailsChildren = serverDetailsNode.childNodes
                if (networkDetailsChildren and networkDetailsChildren.length > 0):
                    for networkDetailNode in networkDetailsChildren:
                        tempNodeName = networkDetailNode.localName
                        if (networkDetailNode.hasChildNodes()):
                            tempNodeVal = networkDetailNode.childNodes.item(0).nodeValue
                            if (tempNodeVal != None):
                                if (tempNodeName == "ipAddress" and tempNodeVal !=None):
                                    ipAddrToken = tempNodeVal
                                    useStaticIP = True
                                if (tempNodeName == "macAddress" and tempNodeVal != None):
                                    macAddrToken = tempNodeVal
                                if (tempNodeName == "vLanId" and tempNodeVal != None and tempNodeVal != "-1"):
                                    vlanidToken = tempNodeVal
                    if (useStaticIP == False):
                        ksOutput += "network --bootproto=dhcp"
                        if (macAddrToken and len(macAddrToken) > 0):
                            ksOutput += " --device=" + macAddrToken 
                        if (vlanidToken and len(vlanidToken) > 0):
                            ksOutput += " --vlanid=" + vlanidToken
                        ksOutput += "\n" 
                    else:
                        ksOutput += "network --bootproto=static"
                        if (vlanidToken and len(vlanidToken) > 0):
                            ksOutput += " --vlanid=" + vlanidToken
                        if (ipAddrToken and len(ipAddrToken) > 0):
                            ksOutput += " --ip=" + ipAddrToken
                            if (macAddrToken and len(macAddrToken) > 0):
                                ksOutput += " --device=" + macAddrToken                        
                            for networkDetailNode in networkDetailsChildren:
                                tempNodeName = networkDetailNode.localName
                                if (networkDetailNode.hasChildNodes()):
                                    tempNodeVal = networkDetailNode.childNodes.item(0).nodeValue
                                    if (tempNodeVal != None):
                                        if (tempNodeName == "defaultGateway"):
                                            ksOutput += " --gateway=" + tempNodeVal
                                        if (tempNodeName == "subnetMask"):
                                            ksOutput += " --netmask=" + tempNodeVal
                                        if (tempNodeName == "preferredDns"):
                                            dnsServers = tempNodeVal
                                        if (tempNodeName == "alternateDns"):
                                            dnsServers += "," + tempNodeVal
                                        if (tempNodeName == "hostName"):
                                            ksOutput += " --hostname=" + tempNodeVal
                            if (dnsServers and len(dnsServers) > 0):
                                ksOutput += " --nameserver=" + dnsServers
                        ksOutput += "\n"
                else:
                    commands.getoutput("logger Unable to derive network details")
            else:
                continue
        # Run and parse the first available virtual disk
        cmdStatus = 256
        cmdOutput = None
        tmpCmd = "esxcfg-scsidevs -l > /tmp/diskResponse.txt"
        (status, cmdoutput) = commands.getstatusoutput(tmpCmd)
        if (status != 0):
            ksOutput += "clearpart --firstdisk --overwritevmfs"
            ksOutput += "\n"
            ksOutput += "autopart --firstdisk --overwritevmfs"
            ksOutput += "\n"
        else:
            devfsStr = ".*Devfs Path:*"
            virtualDiskStr = ".*Model: Virtual Disk*"
            devfsExp = re.compile(devfsStr, re.IGNORECASE)
            virtualDiskExp = re.compile(virtualDiskStr, re.IGNORECASE)
            isOpSuccess = 0
            matchObj = None
            devFsPath = []
            displayLines = []
            opFileHdl = open('/tmp/diskResponse.txt', 'r')
            if (opFileHdl):
                displayLines = opFileHdl.readlines()
                opFileHdl.close()
                if (displayLines and len(displayLines) > 0):
                    for line in displayLines:
                        matchObj = devfsExp.match(line)
                        if (matchObj):
                            devFsPath = None
                            devFsPath = line.split(':')
                            continue
                        matchObj = virtualDiskExp.match(line)
                        if (matchObj):
                            if (devFsPath and len(devFsPath) > 1):
                                isOpSuccess = 1
                                break;
            if(isOpSuccess == 1):
                ksOutput += "clearpart --drives=" + devFsPath[1].strip() + " --overwritevmfs"
                ksOutput += "\n"
                ksOutput += "autopart --drive=" + devFsPath[1].strip() + " --overwritevmfs"
                ksOutput += "\n"
            else:
                ksOutput += "clearpart --firstdisk --overwritevmfs"
                ksOutput += "\n"
                ksOutput += "autopart --firstdisk --overwritevmfs"
                ksOutput += "\n"               
        # Completed parsing all nodes - time to dump output into /tmp/rootpw.cfg
        fileHdl = open('/tmp/rootpw.cfg', 'w')
        if (fileHdl):
            fileHdl.write(ksOutput)
            fileHdl.close()
    idResponseBlob.unlink()     
except Exception,detail:
    TEMP_CMD="logger Exception:" + str(detail)
    print TEMP_CMD
EOF3
python /tmp/runDaemon.py start
python /tmp/getIdentity.py
%post --unsupported --interpreter=busybox
python /tmp/runDaemon.py stop
%firstboot --unsupported --interpreter=python --level=999
import urllib,commands,os,time,string
from stat import ST_SIZE
from xml.dom.minidom import parseString
CMD_STATUS    = 256
OMSA_NAME = "omsa_esxi41_vib.zip"
    
MY_ESXI_URL   = "https://<APPLIANCE_IP>/omsa/" + OMSA_NAME
MY_TEMP_FILE  = "/tmp/" + OMSA_NAME

CMD_STATUS    = 256
MY_IPADDR =commands.getoutput("esxcfg-vmknic -l | grep -vi Interface | awk '{print $5}'")
ctr = 0
time.sleep(60)
while (MY_IPADDR == "0.0.0.0" and ctr < 5):
    time.sleep(20)
    ctr += 1
    MY_IPADDR =commands.getoutput("esxcfg-vmknic -l | grep -vi Interface | awk '{print $5}'")

def logInstallProgress(progressData):
    try:
        logFile = open('/store/dell_postinstall.log','a')
        if (logFile and progressData and len(progressData) > 0):
            currTime = time.strftime("%d %b %y %H:%M:%S",time.gmtime())
            TEMP_STR = currTime + " " + progressData + "\n"
            print TEMP_STR
            logFile.write(TEMP_STR)
            logFile.close()
    except Exception,detail:
        TEMP_CMD="logger Exception:" + str(detail)
        print TEMP_CMD

def configureDNSOnESXi():
    MY_VIRT_NIC = ""
    MY_DHCP_STR = ""
    STATUS      = 0
    try:
        logInstallProgress("Configuring DNS on ESXi........")
        (STATUS, OUTPUTSTR) = commands.getstatusoutput("esxcfg-vmknic -l | grep -vi Interface")
        if (STATUS == 0):
            VMKNICARR = OUTPUTSTR.split()
            MY_VIRT_NIC = VMKNICARR[0]
            MY_DHCP_STR = VMKNICARR[11]
            logInstallProgress("Virtual NIC device name is " + MY_VIRT_NIC)
            logInstallProgress("DHCP status on system is "+MY_DHCP_STR)
            if (MY_DHCP_STR == "DHCP"):
                logInstallProgress("System is set with DHCP ..configuring DNS")
                TEMP_STR = "vim-cmd hostsvc/net/dns_set --dhcp=true --dhcp-virtualnic=" + MY_VIRT_NIC
                (STATUS,OUTPUTSTR) = commands.getstatusoutput(TEMP_STR)
                if (STATUS == 0):
                    logInstallProgress("Successfully set dns entries")
                    commands.getoutput("vim-cmd hostsvc/net/refresh")
                else:
                    logInstallProgress("Unable to set DNS entries")
            else:
                logInstallProgress("System configured for static IP..Extracting resolv.conf settings")
                fileHdl = open('/etc/resolv.conf','r')
                if (fileHdl):
                    resolvFileLines = fileHdl.readlines()
                    fileHdl.close()
                    opFileHdl = open('/store/resolv.conf','w')
                    if (opFileHdl):
                        resolveFileContents = ''.join(resolvFileLines)        
                        opFileHdl.write(resolveFileContents)
                        opFileHdl.close()
                        logInstallProgress("Dumped DNS settings to /store/resolv.conf")
                    else:
                        logInstallProgress("Unable to open /store/resolv.conf for writing")
                else:
                    logInstallProgress("Unable to open /etc/resolv.conf for reading")
        else:
            logInstallProgress("Unable to get esxcfg-vmknic output..exiting")
    except Exception,detail:
        TEMP_CMD="logger Exception:" + str(detail)
        print TEMP_CMD

def configureOmsaOnESXi():
    snmpOutput     = ""
    snmpFileLines  = []
    try:
        fileHdl = open('/etc/vmware/snmp.xml','r')
        if (fileHdl):
            snmpFileLines = fileHdl.readlines()
            fileHdl.close()
        else:
            logInstallProgress("Unable to open snmp.xml file for parsing...Exiting")
            return
        snmpFileStr = ''.join(snmpFileLines)        
        if (snmpFileStr and len(snmpFileStr) > 0):
            idResponseBlob = parseString(snmpFileStr)
        else:
            logInstallProgress("Unable to parse snmp config file ...Exiting")
            return
        if (idResponseBlob):
            configNodeList = idResponseBlob.getElementsByTagName('config')
            if (configNodeList and configNodeList.length > 0):
                for configNodes in configNodeList.item(0).childNodes:
                    if (configNodes.localName == "snmpSettings"):
                        snmpSettingsChildren = configNodes.childNodes
                        if (snmpSettingsChildren and snmpSettingsChildren.length > 0):
                            for snmpSetting in snmpSettingsChildren:
                                tempNode = snmpSetting.localName
                                if (tempNode == "enable"):
                                    if (snmpSetting.hasChildNodes()):
                                        snmpSetting.childNodes.item(0).nodeValue = "true"
                                if (tempNode == "communities"):
                                    if (snmpSetting.hasChildNodes()):
                                        if (snmpSetting.childNodes.item(0).nodeValue and snmpSetting.childNodes.item(0).nodeValue != "public"):
                                            snmpSetting.childNodes.item(0).nodeValue += ",public" 
                                    else:
                                        tempTextNode = idResponseBlob.createTextNode("public")
                                        snmpSetting.appendChild(tempTextNode)
                                if (tempNode == "targets"):
                                    if (snmpSetting.hasChildNodes()):
                                        if (snmpSetting.childNodes.item(0).nodeValue):
                                            snmpSetting.childNodes.item(0).nodeValue += ",<APPLIANCE_IP> public" 
                                    else:
                                        tempTextNode = idResponseBlob.createTextNode("<APPLIANCE_IP> public")
                                        snmpSetting.appendChild(tempTextNode)                                
                    else:
                        pass
            snmpOutput = idResponseBlob.toxml()
            snmpOutput = string.replace(snmpOutput,"<?xml version=\"1.0\" ?>","")
            fileHdl = open('/etc/vmware/snmp.xml', 'w')
            if (fileHdl):
                fileHdl.write(snmpOutput)
                logInstallProgress("SNMP trap configuration completed successfully")
                fileHdl.close()
            idResponseBlob.unlink()
    except Exception,detail:
        TEMP_CMD="logger Exception:" + str(detail)
        logInstallProgress(TEMP_CMD)

configureDNSOnESXi()
logInstallProgress("Downloading OMSA VIB for ESXI 4.1")
urllib.urlretrieve(MY_ESXI_URL, MY_TEMP_FILE)
logInstallProgress("Completed download of OMSA VIB for ESXI 4.1")
if (os.path.exists(MY_TEMP_FILE)):
    fileSize = os.stat(MY_TEMP_FILE)[ST_SIZE] 
    if (fileSize > 32768):
        logInstallProgress("Configuring OMSA trap destination")
        configureOmsaOnESXi()

%firstboot --unsupported --interpreter=busybox --level=1099
cat > /store/installomsa.py <<EOF1
import commands,os,time,string,httplib
from xml.dom.minidom import parseString
from stat import ST_SIZE
CMD_STATUS    = 256
OMSA_NAME = "omsa_esxi41_vib.zip"
    
MY_TEMP_FILE  = "/tmp/" + OMSA_NAME
MY_UPDATE_CMD = "esxupdate update --bundle=" + MY_TEMP_FILE

def logInstallProgress(progressData):
    try:
        logFile = open('/store/dell_postinstall.log','a')
        if (logFile and progressData and len(progressData) > 0):
            currTime = time.strftime("%d %b %y %H:%M:%S",time.gmtime())
            TEMP_STR = currTime + " " + progressData + "\n"
            print TEMP_STR
            logFile.write(TEMP_STR)
            logFile.close()
    except Exception,detail:
        TEMP_CMD="logger Exception:" + str(detail)
        print TEMP_CMD

def reportErrors(ERR_MSG_STR):
        MY_SVCTAG =commands.getoutput("esxcfg-info -w | grep -i serial | sed 's/[^a-zA-Z0-9]*\./ /g' | awk '{print \$3}'")
        ERR_DTL = ''
        if (len(MY_SVCTAG) == 7 and len(ERR_MSG_STR) > 0):    
            defNS="http://pg.dell.com/spectre/deploymentprogress/ws"
            envelope_template = """<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ws="http://pg.dell.com/spectre/deploymentprogress/ws">"""
            envelope_template += """<soapenv:Header/>"""
            envelope_template += """<soapenv:Body>"""
            envelope_template += """<ws:SetInstallationError>"""
            envelope_template += """<ws:serviceTag>""" +  MY_SVCTAG + """</ws:serviceTag>"""
            envelope_template += """<ws:errorCode>""" + ERR_MSG_STR + """</ws:errorCode>"""
            envelope_template += """<ws:errorLogs>""" + ERR_DTL + """</ws:errorLogs>"""
            envelope_template += """</ws:SetInstallationError>"""
            envelope_template += """</soapenv:Body>"""
            envelope_template += """</soapenv:Envelope>"""
            try:
                envlen = len(envelope_template)
                _post = 'http://<APPLIANCE_IP>/Spectre/DeploymentProgressService'
                _host = '<APPLIANCE_IP>'
                _port = 443
                http_conn = httplib.HTTPSConnection(_host,_port)
                http_conn.putrequest('POST', _post)
                http_conn.putheader('Host', _host)
                http_conn.putheader('Content-Type', 'text/xml; charset="utf-8"')
                http_conn.putheader('Content-Length', str(envlen))
                http_conn.putheader('SOAPAction', 'http://pg.dell.com/spectre/deploymentprogress/ws/SetInstallationError')
                http_conn.endheaders() 
                http_conn.send(envelope_template)
                httpresponse = http_conn.getresponse()
                response = httpresponse.read()
                http_conn.close() 
                idResponseBlob = parseString(response)
                idResponseBlob.unlink()
            except Exception,detail:
                TEMP_STR="logger Exception:" + str(detail)
                logInstallProgress(TEMP_STR)

def restoreBootbank():
    fp = open('/vmfs/volumes/Hypervisor2/boot.cfg')
    lines = fp.readlines()
    fp.close()
    
    # erase the onetime.tgz file
    fp = open('/vmfs/volumes/Hypervisor2/boot.cfg', 'w')
    verification = ''
    for line in lines:
        if line.startswith('modules='):
            line = line.replace(' --- onetime.tgz', '')
        fp.write(line)
        verification += line
    fp.close()
    
    # verify file write in case of failed USB writes
    fp = open('/vmfs/volumes/Hypervisor2/boot.cfg')
    contents = fp.read()
    fp.close()
    if contents != verification:
        logInstallProgress("Restore Bootbank failed")
    else:
        logInstallProgress("Restore Bootbank successful")

try:
    if (os.path.exists(MY_TEMP_FILE)):
        fileSize = os.stat(MY_TEMP_FILE)[ST_SIZE] 
        if (fileSize > 32768):
            logInstallProgress("Installing OMSA vib for ESXi 4.1")
            CMD_STATUS = commands.getoutput(MY_UPDATE_CMD)
            CMD_STATUS = 256
            (CMD_STATUS,OP) = commands.getstatusoutput("esxupdate query")
            if (CMD_STATUS == 0):
                if (string.find(OP,"OpenManage") != -1 or string.find(OP,"Dell-Configuration-VIB") != -1):
                    logInstallProgress("Installed OMSA successfully")
                    restoreBootbank()
                else:
                    TEMP_STR = "Unable to install OMSA...Error"
                    logInstallProgress(TEMP_STR)
                    reportErrors("267184")
            else:
                logInstallProgress("Unable to determine OMSA install status...")
        else:
            TEMP_STR="Unable to use downloaded file for install..Error"
            logInstallProgress(TEMP_STR)
            reportErrors("267182")
    else:
        TEMP_STR="File not downloaded or no permissions to write to /tmp..Exiting"
        logInstallProgress(TEMP_STR)
        reportErrors("267183")
except Exception,detail:
    TEMP_STR="logger Exception:" + str(detail)
    logInstallProgress(TEMP_STR)
EOF1
cat > /store/firstboot.py <<EOF2
import httplib,time,os,string,sys,commands
from xml.dom.minidom import parseString

def logInstallProgress(progressData):
    try:
        logFile = open('/store/dell_postinstall.log','a')
        if (logFile and progressData and len(progressData) > 0):
            currTime = time.strftime("%d %b %y %H:%M:%S",time.gmtime())
            TEMP_STR = currTime + " " + progressData + "\n"
            print TEMP_STR
            logFile.write(TEMP_STR)
            logFile.close()
    except Exception,detail:
        TEMP_CMD="logger Exception:" + str(detail)
        print TEMP_CMD

def configureDNSOnESXi():
    MY_VIRT_NIC = ""
    MY_DHCP_STR = ""
    STATUS      = 0
    try:
        logInstallProgress("Configuring DNS on ESXi........")
        (STATUS, OUTPUTSTR) = commands.getstatusoutput("esxcfg-vmknic -l | grep -vi Interface")
        if (STATUS == 0):
            VMKNICARR = OUTPUTSTR.split()
            MY_VIRT_NIC = VMKNICARR[0]
            MY_DHCP_STR = VMKNICARR[11]
            logInstallProgress("Virtual NIC device name is " + MY_VIRT_NIC)
            logInstallProgress("DHCP status on system is "+MY_DHCP_STR)
            if (MY_DHCP_STR == "DHCP"):
                logInstallProgress("System is set with DHCP ..configuring DNS")
                TEMP_STR = "vim-cmd hostsvc/net/dns_set --dhcp=true --dhcp-virtualnic=" + MY_VIRT_NIC
                (STATUS,OUTPUTSTR) = commands.getstatusoutput(TEMP_STR)
                if (STATUS == 0):
                    logInstallProgress("Successfully set dns entries")
                    commands.getoutput("vim-cmd hostsvc/net/refresh")
                else:
                    logInstallProgress("Unable to set DNS entries")
            else:
                logInstallProgress("System configured for static IP..Extracting saved DNS config")
                fileHdl = open('/store/resolv.conf','r')
                if (fileHdl):
                    resolvFileLines = fileHdl.readlines()
                    logInstallProgress("Extracted saved DNS config")
                    fileHdl.close()
                    opFileHdl = open('/etc/resolv.conf','a')
                    if (opFileHdl):
                        resolveFileContents = ''.join(resolvFileLines)        
                        opFileHdl.write(resolveFileContents)
                        opFileHdl.close()
                        commands.getoutput("vim-cmd hostsvc/net/refresh")
                        logInstallProgress("Dumped saved DNS config to /etc/resolv.conf")
                    else:
                        logInstallProgress("Unable to open /etc/resolv.conf for writing")
                else:
                    logInstallProgress("Unable to open /store/resolv.conf for reading")
        else:
            logInstallProgress("Unable to get esxcfg-vmknic output..exiting")
    except Exception,detail:
        TEMP_STR="logger Exception:" + str(detail)
        logInstallProgress(TEMP_STR)

def callbackConsole():
    MY_SVCTAG =commands.getoutput("esxcfg-info -w | grep -i serial | sed 's/[^a-zA-Z0-9]*\./ /g' | awk '{print \$3}'")
    MY_IPADDR =commands.getoutput("esxcfg-vmknic -l | grep -vi Interface | awk '{print \$5}'")
    logInstallProgress("Firstboot:Initial IP address is " + MY_IPADDR)
    ctr = 0
    while (MY_IPADDR == "0.0.0.0" and ctr < 5):
        time.sleep(60)
        ctr += 1
        MY_IPADDR =commands.getoutput("esxcfg-vmknic -l | grep -vi Interface | awk '{print \$5}'")
    logInstallProgress("Resolved IP address is " + MY_IPADDR)

    defNS="http://pg.dell.com/spectre/deploymentprogress/ws"
    envelope_template = """<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ws="http://pg.dell.com/spectre/deploymentprogress/ws">"""
    envelope_template += """<soapenv:Header/>"""
    envelope_template += """<soapenv:Body>"""
    envelope_template += """<ws:UpdateHostDetails>"""
    envelope_template += """<ws:serviceTag>""" +  MY_SVCTAG + """</ws:serviceTag>"""
    envelope_template += """<ws:ipAddress>""" + MY_IPADDR + """</ws:ipAddress>"""
    envelope_template += """</ws:UpdateHostDetails>"""
    envelope_template += """</soapenv:Body>"""
    envelope_template += """</soapenv:Envelope>"""
    try:
        envlen = len(envelope_template)
        _post = 'http://<APPLIANCE_IP>/Spectre/DeploymentProgressService'
        _host = '<APPLIANCE_IP>'
        _port = 443
        logInstallProgress("Initiated connection for updatehost")
        http_conn = httplib.HTTPSConnection(_host,_port)
        http_conn.putrequest('POST', _post)
        http_conn.putheader('Host', _host)
        http_conn.putheader('Content-Type', 'text/xml; charset="utf-8"')
        http_conn.putheader('Content-Length', str(envlen))
        http_conn.putheader('SOAPAction', 'http://pg.dell.com/spectre/deploymentprogress/ws/UpdateHostDetails')
        http_conn.endheaders()
        http_conn.send(envelope_template)
        httpresponse = http_conn.getresponse()
        response = httpresponse.read()
        http_conn.close() 
        idResponseBlob = parseString(response)
        logInstallProgress(idResponseBlob.toprettyxml())
        updateResponseNode = idResponseBlob.getElementsByTagNameNS(defNS,'UpdateHostDetailsResponse')
        if (updateResponseNode == None or updateResponseNode.length <= 0):
            logInstallProgress("No update response node in ack from console...potential fault")
            idResponseBlob.unlink()
            return False
        else:
            logInstallProgress("Found update response node in ack from console...Exiting")
            idResponseBlob.unlink()
            return True
    except Exception,detail:
        TEMP_STR="logger Exception:" + str(detail)
        logInstallProgress(TEMP_STR)
        return False

CMD_STATUS = 256
(CMD_STATUS,OP) = commands.getstatusoutput("esxupdate query")
if (CMD_STATUS == 0):
    if (string.find(OP,"OpenManage") != -1 or string.find(OP,"Dell-Configuration-VIB") != -1):
        ackRecvd = False
        ctr = 0
        configureDNSOnESXi()
        while (ctr < 4 and ackRecvd == False):
            ctr += 1
            ackRecvd = callbackConsole()
            time.sleep(30)
    else:
        logInstallProgress("OMSA VIB not installed..not calling console")
else:
    logInstallProgress("Unable to determine if OMSA is installed")
EOF2

cat > /store/oemProviderEnabled.py <<EOFG
import time,os,string,sys,commands
from xml.dom.minidom import parseString

def logInstallProgress(progressData):
    try:
        logFile = open('/store/dell_postinstall.log','a')
        if (logFile and progressData and len(progressData) > 0):
            currTime = time.strftime("%d %b %y %H:%M:%S",time.gmtime())
            TEMP_STR = currTime + " " + progressData + "\n"
            print TEMP_STR
            logFile.write(TEMP_STR)
            logFile.close()
    except Exception,detail:
        TEMP_CMD="logger Exception:" + str(detail)
        print TEMP_CMD
        
def isConfigureOEMProvider():
  try:
    logInstallProgress("In isConfigureOEMProvider")
    tempStatus = 256
    tempCmdOut = ""
    (tempStatus, tempCmdOut) = commands.getstatusoutput("esxcfg-advcfg -l | grep -i UserVars/CIMoem")
    if (tempStatus == 0):
        tempStatus = 256
        varList = tempCmdOut.split("\n")
        if (varList != None):
            for var in varList:
                tempVars = var.split("[")
                if (tempVars != None and tempVars[0] != None):
                    strVar = str(tempVars[0]).strip()
                    tempStatus = 256
                    tempCmdOut = ""
                    (tempStatus, tempCmdOut) = commands.getstatusoutput("esxcfg-advcfg -s 1 " + strVar)
                    logInstallProgress("CIMoemProvider variable is: " + strVar)
                else:
                    pass
        else:
            pass
    else:
        pass
    
    logInstallProgress("CIMoemProviderEnabled:status is " + tempCmdOut)
    return tempCmdOut
  except Exception,detail:
    TEMP_CMD="logger Exception:" + str(detail)
    logInstallProgress(TEMP_CMD)
    return ""

def enableoemProviderEnabledAndDuplicateImageDetection():
    MY_SVCTAG =commands.getoutput("esxcfg-info -w | grep -i serial | sed 's/[^a-zA-Z0-9]*\./ /g' | awk '{print \$3}'")
    MY_IPADDR =commands.getoutput("esxcfg-vmknic -l | grep -vi Interface | awk '{print \$5}'")
    logInstallProgress("CIMoemProviderEnabled:Initial IP address is " + MY_IPADDR)
    ctr = 0
    while (MY_IPADDR == "0.0.0.0" and ctr < 5):
        time.sleep(60)
        ctr += 1
        MY_IPADDR =commands.getoutput("esxcfg-vmknic -l | grep -vi Interface | awk '{print \$5}'")
    logInstallProgress("Resolved IP address is " + MY_IPADDR)
    MY_COMMAND = isConfigureOEMProvider()
    logInstallProgress("CIMoemProviderEnabled:status is " + MY_COMMAND)
    MY_COMMAND = commands.getoutput("esxcfg-advcfg -k TRUE overrideDuplicateImageDetection")
    logInstallProgress("overrideDuplicateImageDetection is " + MY_COMMAND)
    MY_COMMAND =commands.getoutput("esxcfg-advcfg -j overrideDuplicateImageDetection")
    logInstallProgress("overrideDuplicateImageDetection is " + MY_COMMAND)
    
enableoemProviderEnabledAndDuplicateImageDetection()
EOFG

cp /etc/rc.local /store/rc.local.orig
cp /etc/rc.local /store/rc.local.bak

echo "export PYTHONHOME=$PYTHONHOME" >> /store/rc.local.bak
echo "export PYTHONPATH=$PYTHONPATH" >> /store/rc.local.bak
cat >> /store/rc.local.bak <<EOF4
sleep 120s
python /store/firstboot.py 2>&1
echo "firstboot is executed"
sleep 30s
rm -f /store/installomsa.py
rm -f /store/firstboot.py
rm -f /store/oemProviderEnabled.py
mv -f /store/rc.local.orig /etc/rc.local
/sbin/auto-backup.sh
EOF4

echo "export PYTHONHOME=$PYTHONHOME" >> /etc/rc.local
echo "export PYTHONPATH=$PYTHONPATH" >> /etc/rc.local
cat >> /etc/rc.local <<EOFR
sleep 120s
python /store/oemProviderEnabled.py 2>&1
echo "CIMoemProviderEnabled is executed"
sleep 30s
mv -f /store/rc.local.bak /etc/rc.local
/sbin/auto-backup.sh
reboot
EOFR

echo "Backing up system settings...."
/sbin/auto-backup.sh
%firstboot --unsupported --interpreter=busybox --level=9999
python /store/installomsa.py
echo "Completed OMSA install"
sleep 30s
reboot
