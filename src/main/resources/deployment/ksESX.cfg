vmaccepteula
%include /tmp/rootpw.cfg
install nfs --server={0} --dir={1}
reboot
%pre --interpreter=bash
cat >/tmp/daemon.py << EOF1
import sys, os, time, atexit, commands
from signal import SIGTERM 
class Daemon:
    def __init__(self, pidfile, stdin='/dev/null', stdout='/dev/null', stderr='/dev/null'):
        self.stdin = stdin
        self.stdout = stdout
        self.stderr = stderr
        self.pidfile = pidfile
    
    def daemonize(self):
        try: 
            pid = os.fork() 
            if pid > 0:
                # exit first parent
                sys.exit(0) 
        except OSError, e: 
            sys.stderr.write("fork #1 failed: %d (%s)\n" % (e.errno, e.strerror))
            sys.exit(1)
    
        # decouple from parent environment
        os.chdir("/") 
        os.setsid() 
        os.umask(0) 
    
        # do second fork
        try: 
            pid = os.fork() 
            if pid > 0:
                # exit from second parent
                sys.exit(0) 
        except OSError, e: 
            sys.stderr.write("fork #2 failed: %d (%s)\n" % (e.errno, e.strerror))
            sys.exit(1) 
    
        # redirect standard file descriptors
        sys.stdout.flush()
        sys.stderr.flush()
        si = file(self.stdin, 'r')
        so = file(self.stdout, 'a+')
        se = file(self.stderr, 'a+', 0)
        os.dup2(si.fileno(), sys.stdin.fileno())
        os.dup2(so.fileno(), sys.stdout.fileno())
        os.dup2(se.fileno(), sys.stderr.fileno())
    
        # write pidfile
        atexit.register(self.delpid)
        pid = str(os.getpid())
        file(self.pidfile,'w+').write("%s\n" % pid)
    
    def delpid(self):
        os.remove(self.pidfile)

    def start(self):
        # Check for a pidfile to see if the daemon already runs
        try:
            pf = file(self.pidfile,'r')
            pid = int(pf.read().strip())
            pf.close()
        except IOError:
            pid = None
    
        if pid:
            message = "pidfile %s already exist. Daemon already running?\n"
            sys.stderr.write(message % self.pidfile)
            sys.exit(1)
        
        # Start the daemon
        self.daemonize()
        self.run()

    def stop(self):
        # Get the pid from the pidfile
        try:
            pf = file(self.pidfile,'r')
            pid = int(pf.read().strip())
            pf.close()
        except IOError:
            pid = None
    
        if not pid:
            message = "pidfile %s does not exist. Daemon not running?\n"
            sys.stderr.write(message % self.pidfile)
            return # not an error in a restart

        # Try killing the daemon process    
        try:
            MY_OP=""
            CTR  = 0
            while CTR < 10:
                CTR += 1
                TEMP_CMD="kill -9 " + str(pid)
                MY_OP = commands.getoutput(TEMP_CMD)
                if (MY_OP.find("No such process")) > 0:
                    if os.path.exists(self.pidfile):
                        os.remove(self.pidfile)
                time.sleep(2)
        except OSError, err:
            err = str(err)
            if err.find("No such process") > 0:
                if os.path.exists(self.pidfile):
                    os.remove(self.pidfile)
            else:
                print str(err)
                sys.exit(1)

    def restart(self):
        self.stop()
        self.start()

    def run(self):
        message = "Initiating install progress monitor daemon"
EOF1
cat >/tmp/runDaemon.py << EOF2
import sys, time, httplib, string, commands
from xml.dom.minidom import parseString
from daemon import Daemon
class MyDaemon(Daemon):
    def run(self):
        MY_SVCTAG =commands.getoutput("esxcfg-info -w | grep -i serial | sed 's/[^a-zA-Z0-9]*\./ /g' | awk '{print \$3}'")
        ERR_MSG     = []
        ERR_MSG_STR = ''
        ERR_CODE    = '267195'
        CTR         = 0
        errorFound  = False
        while (CTR < 50 and errorFound == False):
                time.sleep(30)
                CTR += 1
                f=open('/var/log/esx_install.log','r')
                if (f):
                    LINES = f.readlines()
                    f.close()
                    for i in range(len(LINES)):
                        if ((string.find(LINES[i],"ERROR") != -1) and (string.find(LINES[i],"DEBUG") == -1) and (string.find(LINES[i],"metadata.zip") == -1) and (string.find(LINES[i],"No route to host") == -1)):
                            TEMP_STR = LINES[i].rstrip('\n')
                            ERR_MSG.append(TEMP_STR)
                            errorFound = True
                    if (len(ERR_MSG) > 0 and errorFound == True):
                        for MSG in ERR_MSG:
                            ERR_MSG_STR += MSG
                if (len(MY_SVCTAG) == 7 and len(ERR_MSG_STR) > 0):    
                    defNS="http://pg.dell.com/spectre/deploymentprogress/ws"
                    envelope_template = """<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ws="http://pg.dell.com/spectre/deploymentprogress/ws">"""
                    envelope_template += """<soapenv:Header/>"""
                    envelope_template += """<soapenv:Body>"""
                    envelope_template += """<ws:SetInstallationError>"""
                    envelope_template += """<ws:serviceTag>""" +  MY_SVCTAG + """</ws:serviceTag>"""
                    envelope_template += """<ws:errorCode>""" + ERR_CODE + """</ws:errorCode>"""
                    envelope_template += """<ws:errorLogs>""" + ERR_MSG_STR + """</ws:errorLogs>"""
                    envelope_template += """</ws:SetInstallationError>"""
                    envelope_template += """</soapenv:Body>"""
                    envelope_template += """</soapenv:Envelope>"""
                    try:
                        envlen = len(envelope_template)
                        _post = 'http://<APPLIANCE_IP>/Spectre/DeploymentProgressService'
                        _host = '<APPLIANCE_IP>'
                        _port = 443
                        http_conn = httplib.HTTPSConnection(_host,_port)
                        http_conn.putrequest('POST', _post)
                        http_conn.putheader('Host', _host)
                        http_conn.putheader('Content-Type', 'text/xml; charset="utf-8"')
                        http_conn.putheader('Content-Length', str(envlen))
                        http_conn.putheader('SOAPAction', 'http://pg.dell.com/spectre/deploymentprogress/ws/SetInstallationError')
                        http_conn.endheaders() 
                        http_conn.send(envelope_template)
                        httpresponse = http_conn.getresponse()
                        response = httpresponse.read()
                        http_conn.close() 
                        idResponseBlob = parseString(response)
                        idResponseBlob.unlink()
                        daemon.stop()
                    except Exception,detail:
                        TEMP_STR = "logger Exception:" + str(detail)
                        print TEMP_STR
                        daemon.stop()
            
if __name__ == "__main__":
    daemon = MyDaemon('/tmp/daemon-example.pid')
    if len(sys.argv) == 2:
        if 'start' == sys.argv[1]:
            daemon.start()
        elif 'stop' == sys.argv[1]:
            daemon.stop()
        elif 'restart' == sys.argv[1]:
            daemon.restart()
        else:
            print "Unknown command"
        sys.exit(0)
    else:
        print "usage: %s start|stop|restart" % sys.argv[0]
EOF2
cat > /tmp/getIdentity.py <<EOF3
import httplib,commands,os,sys,re,string
from xml.dom.minidom import parseString
MY_SVCTAG =commands.getoutput("esxcfg-info -w | grep -i serial | sed 's/[^a-zA-Z0-9]*\./ /g' | awk '{print \$3}'")
MY_MACLIST=commands.getoutput("esxcfg-nics -l| grep -vi description | awk '{print \$7}'")
MACARRAY=MY_MACLIST.split('\n')
MY_MAC=MACARRAY[0]
useStaticIP  = False
macAddrToken = ""
vlanidToken  = ""
ipAddrToken  = ""
dnsServers   = ""
ksOutput     = ""
defNS        = "http://pg.dell.com/spectre/deploymentprogress/ws"
envelope_template = """<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ws="http://pg.dell.com/spectre/deploymentprogress/ws">"""
envelope_template += """<soapenv:Header/>"""
envelope_template += """<soapenv:Body>"""
envelope_template += """<ws:GetIdentity>"""
envelope_template += """<ws:serviceTag>""" +  MY_SVCTAG + """</ws:serviceTag>"""
envelope_template += """<ws:requestToken>""" + MY_MAC + """</ws:requestToken>"""
envelope_template += """</ws:GetIdentity>"""
envelope_template += """</soapenv:Body>"""
envelope_template += """</soapenv:Envelope>"""
try:
    envlen = len(envelope_template)
    _post = 'http://<APPLIANCE_IP>/Spectre/DeploymentProgressService'
    _host = '<APPLIANCE_IP>'
    _port = 443
    http_conn = httplib.HTTPSConnection(_host,_port)
    http_conn.putrequest('POST', _post)
    http_conn.putheader('Host', _host)
    http_conn.putheader('Content-Type', 'text/xml; charset="utf-8"')
    http_conn.putheader('Content-Length', str(envlen))
    http_conn.putheader('SOAPAction', 'http://pg.dell.com/spectre/deploymentprogress/ws/GetIdentity')
    http_conn.endheaders() 
    http_conn.send(envelope_template)
    httpresponse = http_conn.getresponse()
    response = httpresponse.read()
    http_conn.close() 
    idResponseBlob = parseString(response)
    serverDetailsNodeList = idResponseBlob.getElementsByTagNameNS(defNS,'ServerDetails')
    if (serverDetailsNodeList == None or serverDetailsNodeList.length <= 0):
        print "ERROR: Unable to get server detail info from Dell Plugin"
    else:
        for serverDetailsNode in serverDetailsNodeList.item(0).childNodes:
            if (serverDetailsNode and serverDetailsNode.hasChildNodes()):
                tempNodeVal = serverDetailsNode.childNodes.item(0).nodeValue
            if (serverDetailsNode.localName == "password" and tempNodeVal != None):
                ksOutput += "rootpw --iscrypted " + tempNodeVal + "\n" 
            elif (serverDetailsNode.localName == "NetworkDetails"):
                networkDetailsChildren = serverDetailsNode.childNodes
                if (networkDetailsChildren and networkDetailsChildren.length > 0):
                    for networkDetailNode in networkDetailsChildren:
                        tempNodeName = networkDetailNode.localName
                        if (networkDetailNode.hasChildNodes()):
                            tempNodeVal = networkDetailNode.childNodes.item(0).nodeValue
                            if (tempNodeVal != None):
                                if (tempNodeName == "ipAddress" and tempNodeVal !=None):
                                    ipAddrToken = tempNodeVal
                                    useStaticIP = True
                                if (tempNodeName == "macAddress" and tempNodeVal != None):
                                    macAddrToken = tempNodeVal
                                if (tempNodeName == "vLanId" and tempNodeVal != None and tempNodeVal != "-1"):
                                    vlanidToken = tempNodeVal
                    if (useStaticIP == False):
                        ksOutput += "network --bootproto=dhcp"
                        if (macAddrToken and len(macAddrToken) > 0):
                            ksOutput += " --device=" + macAddrToken
                        if (vlanidToken and len(vlanidToken) > 0):
                            ksOutput += " --vlanid=" + vlanidToken
                        ksOutput += "\n"
                    else:
                        ksOutput += "network --bootproto=static"
                        if (vlanidToken and len(vlanidToken) > 0):
                            ksOutput += " --vlanid=" + vlanidToken
                        if (ipAddrToken and len(ipAddrToken) > 0):
                            ksOutput += " --ip=" + ipAddrToken
                            if (macAddrToken and len(macAddrToken) > 0):
                                ksOutput += " --device=" + macAddrToken                        
                            for networkDetailNode in networkDetailsChildren:
                                tempNodeName = networkDetailNode.localName
                                if (networkDetailNode.hasChildNodes()):
                                    tempNodeVal = networkDetailNode.childNodes.item(0).nodeValue
                                    if (tempNodeVal != None):
                                        if (tempNodeName == "defaultGateway"):
                                            ksOutput += " --gateway=" + tempNodeVal
                                        if (tempNodeName == "subnetMask"):
                                            ksOutput += " --netmask=" + tempNodeVal
                                        if (tempNodeName == "preferredDns"):
                                            dnsServers = tempNodeVal
                                        if (tempNodeName == "alternateDns"):
                                            dnsServers += "," + tempNodeVal
                                        if (tempNodeName == "hostName"):
                                            ksOutput += " --hostname=" + tempNodeVal
                            if (dnsServers and len(dnsServers) > 0):
                                ksOutput += " --nameserver=" + dnsServers
                        ksOutput += "\n"
                else:
                    commands.getoutput("logger Unable to derive network details")
            else:
                continue
        # Run and parse the first available virtual disk
        cmdStatus = 256
        cmdOutput = None
        tmpCmd = "esxcli corestorage device list > /tmp/diskResponse.txt"
        (status, cmdoutput) = commands.getstatusoutput(tmpCmd)
        if (status != 0):
            ksOutput += "clearpart --firstdisk --overwritevmfs"
            ksOutput += "\n"
            ksOutput += "autopart --firstdisk"
            ksOutput += "\n"
        else:
            devfsStr = ".*Devfs Path:*"
            virtualDiskStr = ".*Model: Virtual Disk*"
            devfsExp = re.compile(devfsStr, re.IGNORECASE)
            virtualDiskExp = re.compile(virtualDiskStr, re.IGNORECASE)
            isOpSuccess = 0
            matchObj = None
            devFsPath = []
            displayLines = []
            opFileHdl = open('/tmp/diskResponse.txt', 'r')
            if (opFileHdl):
                displayLines = opFileHdl.readlines()
                opFileHdl.close()
                if (displayLines and len(displayLines) > 0):
                    for line in displayLines:
                        matchObj = devfsExp.match(line)
                        if (matchObj):
                            devFsPath = None
                            devFsPath = line.split(':')
                            continue
                        matchObj = virtualDiskExp.match(line)
                        if (matchObj):
                            if (devFsPath and len(devFsPath) > 1):
                                isOpSuccess = 1
                                break;
            if(isOpSuccess == 1):
                ksOutput += "clearpart --drives=" + devFsPath[1].strip() + " --overwritevmfs"
                ksOutput += "\n"
                ksOutput += "autopart --drive=" + devFsPath[1].strip()
                ksOutput += "\n"
            else:
                ksOutput += "clearpart --firstdisk --overwritevmfs"
                ksOutput += "\n"
                ksOutput += "autopart --firstdisk"
                ksOutput += "\n"               
        # Completed parsing all nodes - time to dump output into /tmp/rootpw.cfg
        fileHdl = open('/tmp/rootpw.cfg', 'w')
        if (fileHdl):
            fileHdl.write(ksOutput)
            fileHdl.close()
    idResponseBlob.unlink()
except Exception,detail:
    TEMP_CMD="logger Exception:" + str(detail)
    print TEMP_CMD
EOF3
python /tmp/runDaemon.py start
python /tmp/getIdentity.py
%post --interpreter=bash --nochroot
python /tmp/runDaemon.py stop
%post --interpreter=bash
cat > /root/installomsa.py <<EOFOMSA
import urllib, commands, httplib
import os, time, sys, string
from stat import ST_SIZE
from xml.dom.minidom import parseString

CMD_STATUS    = 256
OMSA_NAME = "omsa_esx41.tar.gz"

MY_ESX41_URL = "https://<APPLIANCE_IP>/omsa/" + OMSA_NAME

def logInstallProgress(progressData):
    logFile = open('/root/dell_postinstall.log','a')
    if (logFile and progressData and len(progressData) > 0):
        currTime = time.strftime("%d %b %y %H:%M:%S",time.gmtime())
        TEMP_STR = currTime + " " + progressData
        print TEMP_STR
        logFile.write(TEMP_STR)
        logFile.close()

## Method to report errors back to the Spectre Engine ##
def reportErrors(ERR_MSG_STR):
    ERR_DTL = ''
    MY_SVCTAG =commands.getoutput("esxcfg-info -w | grep -i serial | sed 's/[^a-zA-Z0-9]*\./ /g' | awk '{print \$3}'")
    if (len(MY_SVCTAG) == 7 and len(ERR_MSG_STR) > 0):    
        defNS="http://pg.dell.com/spectre/deploymentprogress/ws"
        envelope_template = """<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ws="http://pg.dell.com/spectre/deploymentprogress/ws">"""
        envelope_template += """<soapenv:Header/>"""
        envelope_template += """<soapenv:Body>"""
        envelope_template += """<ws:SetInstallationError>"""
        envelope_template += """<ws:serviceTag>""" +  MY_SVCTAG + """</ws:serviceTag>"""
        envelope_template += """<ws:errorCode>""" + ERR_MSG_STR + """</ws:errorCode>"""
        envelope_template += """<ws:errorLogs>""" + ERR_DTL + """</ws:errorLogs>"""
        envelope_template += """</ws:SetInstallationError>"""
        envelope_template += """</soapenv:Body>"""
        envelope_template += """</soapenv:Envelope>"""
        try:
            envlen = len(envelope_template)
            _post = 'http://<APPLIANCE_IP>/Spectre/DeploymentProgressService'
            _host = '<APPLIANCE_IP>'
            _port = 443
            http_conn = httplib.HTTPSConnection(_host,_port)
            http_conn.putrequest('POST', _post)
            http_conn.putheader('Host', _host)
            http_conn.putheader('Content-Type', 'text/xml; charset="utf-8"')
            http_conn.putheader('Content-Length', str(envlen))
            http_conn.putheader('SOAPAction', 'http://pg.dell.com/spectre/deploymentprogress/ws/SetInstallationError')
            http_conn.endheaders() 
            http_conn.send(envelope_template)
            httpresponse = http_conn.getresponse()
            response = httpresponse.read()
            http_conn.close() 
            idResponseBlob = parseString(response)
            idResponseBlob.unlink()
        except Exception,detail:
            TEMP_STR="logger Exception:" + str(detail)
            logInstallProgress(TEMP_STR)
            print TEMP_STR

def callbackConsole():
    MY_SVCTAG =commands.getoutput("esxcfg-info -w | grep -i serial | sed 's/[^a-zA-Z0-9]*\./ /g' | awk '{print \$3}'")
    MY_IPADDR =commands.getoutput("esxcfg-vswif -l | grep -vi broadcast | awk '{print \$5}'")
    print "Initial IP address is ", MY_IPADDR
    ctr = 0
    while (MY_IPADDR == "0.0.0.0" and ctr < 5):
        time.sleep(60)
        ctr += 1
        MY_IPADDR =commands.getoutput("esxcfg-vswif -l | grep -vi broadcast | awk '{print \$5}'")
    defNS="http://pg.dell.com/spectre/deploymentprogress/ws"
    envelope_template = """<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ws="http://pg.dell.com/spectre/deploymentprogress/ws">"""
    envelope_template += """<soapenv:Header/>"""
    envelope_template += """<soapenv:Body>"""
    envelope_template += """<ws:UpdateHostDetails>"""
    envelope_template += """<ws:serviceTag>""" +  MY_SVCTAG + """</ws:serviceTag>"""
    envelope_template += """<ws:ipAddress>""" + MY_IPADDR + """</ws:ipAddress>"""
    envelope_template += """</ws:UpdateHostDetails>"""
    envelope_template += """</soapenv:Body>"""
    envelope_template += """</soapenv:Envelope>"""
    try:
        envlen = len(envelope_template)
        _post = 'http://<APPLIANCE_IP>/Spectre/DeploymentProgressService'
        _host = '<APPLIANCE_IP>'
        _port = 443
        http_conn = httplib.HTTPSConnection(_host,_port)
        http_conn.putrequest('POST', _post)
        http_conn.putheader('Host', _host)
        http_conn.putheader('Content-Type', 'text/xml; charset="utf-8"')
        http_conn.putheader('Content-Length', str(envlen))
        http_conn.putheader('SOAPAction', 'http://pg.dell.com/spectre/deploymentprogress/ws/UpdateHostDetails')
        http_conn.endheaders() 
        http_conn.send(envelope_template)
        httpresponse = http_conn.getresponse()
        response = httpresponse.read()
        http_conn.close()
        idResponseBlob = parseString(response)
        ## Dump the response from spectre into the install log
        logInstallProgress(idResponseBlob.toprettyxml())
        updateResponseNode = idResponseBlob.getElementsByTagNameNS(defNS,'UpdateHostDetailsResponse')
        if (updateResponseNode == None or updateResponseNode.length <= 0):
            logInstallProgress("No update response node in ack from console...potential fault")
            idResponseBlob.unlink()
            return False
        else:
            logInstallProgress("Found update response node in ack from console...Exiting")
            idResponseBlob.unlink()
            return True
    except Exception,detail:
        TEMP_STR = "Exception:" + str(detail)
        logInstallProgress(TEMP_STR)
        return False

def logErrors(errorString):
    if (errorString and len(errorString) > 0):
        print "Error Code: " + errorString
        reportErrors(errorString)

def installOMSAOnESX(esxVersion):
    CMD_STATUS     = 256
    MY_TEMP_FILE   = "/tmp/omsa_esx.tar.gz"
    MY_WORKING_DIR = "/tmp/omsa_esx"

    logInstallProgress("Downloading OMSA tarball for ESX 4.1\n") 
    urllib.urlretrieve(MY_ESX41_URL, MY_TEMP_FILE)
    logInstallProgress("Completed download of OMSA tarball for ESX 4.1\n") 
        
    if (os.path.exists(MY_TEMP_FILE)):
        logInstallProgress("Temporary omsa download exists...\n")
        fileSize = os.stat(MY_TEMP_FILE)[ST_SIZE]
        if (fileSize > 32768):
            TEMP_CMD = "mkdir " + MY_WORKING_DIR
            (CMD_STATUS, INFO) = commands.getstatusoutput(TEMP_CMD)
            if (CMD_STATUS == 0):
                logInstallProgress("Temporary working directory created for OMSA install\n")
                CMD_STATUS = 256
                TEMP_CMD = "tar -zxvf " + MY_TEMP_FILE + " -C " + MY_WORKING_DIR
                logInstallProgress("Successfully untarred omsa archive into temp dir\n")
                (CMD_STATUS,INFO) = commands.getstatusoutput(TEMP_CMD)
                if (CMD_STATUS == 0):
                    CMD_STATUS = 256
                    logInstallProgress("Initializing OMSA install\n")
                    TEMP_CMD = MY_WORKING_DIR + "/linux/supportscripts/srvadmin-install.sh -x -c"
                    (CMD_STATUS,INFO) = commands.getstatusoutput(TEMP_CMD)
                    if (CMD_STATUS == 0):
                        logInstallProgress("OMSA successfully installed\n")
                        CMD_STATUS = 256
                        TEMP_CMD = "("+ MY_WORKING_DIR + "/linux/supportscripts/srvadmin-services.sh start 2>&1) >/dev/null"
                        os.popen(TEMP_CMD)
                        time.sleep(180)
                        TEMP_CMD = MY_WORKING_DIR + "/linux/supportscripts/srvadmin-services.sh status"
                        (CMD_STATUS,INFO) = commands.getstatusoutput(TEMP_CMD)
                        if (CMD_STATUS == 0):
                            logInstallProgress("Successfully started OMSA agents\n")
                        else:
                            # Inability to start the agents shouldn't fail deployment either
                            logInstallProgress("Unable to start OMSA agents\n")
                        logInstallProgress("Configuring firewall for OMSA exception\n")
                        CMD_STATUS = 256
                        (CMD_STATUS, INFO) = commands.getstatusoutput("esxcfg-firewall -o 1311,tcp,in,OpenManageRequest")
                        if (CMD_STATUS == 0):
                            logInstallProgress("Successfully opened OMSA firewall exception\n")
                            TRAP_CFG_STATUS = True
                            TRAP_CFG_STATUS = configOMSAOnESX()
                            if (TRAP_CFG_STATUS == True):
                                return True
                            else:
                                return False
                        else:
                            TEMP_STR = "Unable to open OMSA firewall exception : " + INFO
                            logInstallProgress(TEMP_STR)
                            logErrors("267191")
                            return False
                    else:
                        TEMP_STR = "Unable to install OMSA: " + INFO + "\n"
                        logInstallProgress(TEMP_STR)
                        logErrors("267184")
                        return False
                else:
                    TEMP_STR = "Unable to untar OMSA archive..Exiting\n"
                    logInstallProgress(TEMP_STR)
                    logErrors("267192")
                    return False
            else:
                TEMP_STR = "Unable to make temp directory for OMSA installation\n"
                logInstallProgress(TEMP_STR)
                logErrors("267193")
                return False
        else:
            TEMP_STR = "Unable to use downloaded file for OMSA install\n"
            logInstallProgress(TEMP_STR)
            logErrors("267182")
            return False
    else:
        TEMP_STR = "OMSA not downloaded or no permissions to write to /tmp\n"
        logInstallProgress(TEMP_STR)
        logErrors("267183")
        return False
        
    
def configOMSAOnESX():
    snmpFile = open('/etc/snmp/snmpd.conf', 'a')
    if (snmpFile):
        snmpFile.write("trapsink <APPLIANCE_IP> public")
        snmpFile.close()
        (CMD_STATUS,INFO) = commands.getstatusoutput("esxcfg-firewall -e snmpd")
        if (CMD_STATUS == 0):
            logInstallProgress("Successfully opened SNMP firewall exception\n")
        else:
            logInstallProgress("Unable to open SNMP firewall exception\n")
        # This needn't cause deployment to fail - should be easy to rectify from the 
        # console if this happens
        return True
    else:
        TEMP_STR = "Unable to configure SNMP trap destination\n"
        logInstallProgress(TEMP_STR)
        logErrors("267194")
        return False
    
(CMD_STATUS, MY_HYP_VER) = commands.getstatusoutput("vmware -v | awk '{print \$2 \$3}'")
try:
    if (CMD_STATUS == 0):
        # Reset the status of the command
        CMD_STATUS = 256
        # Now check if we can open the firewall for retreiving the file
        (CMD_STATUS, OPEN_FIREWALL) = commands.getstatusoutput("esxcfg-firewall -o 443,tcp,in,out,https")
        if (CMD_STATUS == 0):
            if (MY_HYP_VER == "ESX4.1.0"):
                OMSA_INST_STATUS = False
                OMSA_INST_STATUS = installOMSAOnESX(1)
                if (OMSA_INST_STATUS == True):
                    ctr = 0
                    ackRecvd = False
                    while (ctr < 4 and ackRecvd == False):
                        ctr += 1
                        ackRecvd = callbackConsole()
                        time.sleep(30)
            else:
                TEMP_STR = "Unsupported ESX version..." + MY_HYP_VER
                logInstallProgress(TEMP_STR)
                reportErrors("267190")
            # Reset command status and close firewall HTTPS exception    
            CMD_STATUS = 256
            (CMD_STATUS, CLOSE_FIREWALL) = commands.getstatusoutput("esxcfg-firewall -c 443,tcp,in,out,https")
            if (CMD_STATUS == 0):
                TEMP_STR = "Closed firewall for HTTPs requests successfully\n"
                logInstallProgress(TEMP_STR)
            else:
                TEMP_STR = "Unable to close firewall for HTTPs exception:" + CLOSE_FIREWALL + "\n"
                logInstallProgress(TEMP_STR)       
        else:
            logInstallProgress("Unable to open firewall for https...not installing OMSA\n")
    else:
        logInstallProgress("Unable to get hypervisor version...not installing OMSA\n")
except Exception,detail:
    TEMP_STR = "Exception occured : "  + str(detail)
    logInstallProgress(TEMP_STR)
EOFOMSA
cp /etc/rc.d/rc.local /etc/rc.d/rc.local.bak
cat >> /etc/rc.d/rc.local <<EOF
python /root/installomsa.py
rm -f /root/installomsa.py
mv -f /etc/rc.d/rc.local.bak /etc/rc.d/rc.local
EOF
